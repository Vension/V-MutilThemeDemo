apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
//加载本地文件
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.vension.mutiltheme.demo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
            //, 'mips', 'mips64'
        }

        // 渠道配置 gradle 3.0.0 以上需要有这个
        flavorDimensions "app"
    }

    signingConfigs {

        AblegeniusMemberConfig {
            //第一种：使用gradle直接签名打包
            /*  keyAlias 'dongwang'
            keyPassword '123123'
            storeFile file('src/main/WineverzhudiStoreFile.jks')
            storePassword '123123'*/

            //第二种：为了保护签名文件，把它放在local.properties中并在版本库中排除
            // ，不把这些信息写入到版本库中（注意，此种方式签名文件中不能有中文）
//            storeFile file(properties.getProperty("keystroe_storeFile"))
//            storePassword properties.getProperty("keystroe_storePassword")
//            keyAlias properties.getProperty("keystroe_keyAlias")
//            keyPassword properties.getProperty("keystroe_keyPassword")

            v2SigningEnabled false
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//    buildTypes {
//        release {
//            // release模式下，不显示log
//            buildConfigField("boolean", "LOG_DEBUG", "false")
//            // 为版本名添加后缀
////            versionNameSuffix "-relase"
//            // 不开启混淆
//            minifyEnabled false
//            // 移除无用的resource文件
//            shrinkResources false
//            // 开启ZipAlign优化
//            zipAlignEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.AblegeniusMemberConfig
//
//            // 多渠道相关设置
////            applicationVariants.all { variant ->
////                buildConfigField("String", "PROUDCT", "\"newapp\"")
////                buildConfigField("String[]", "DNSS", "{\"http://119.29.29.29\",\"http://8.8.8.8\",\"http://114.114.114.114\"}")
////                if (variant.flavorName == 'china') {
////                    buildConfigField("String", "DNS", "\"http://119.29.29.29\"")
////                } else if (variant.flavorName == 'america') {
////                    buildConfigField("String", "DNS", "\"http://8.8.8.8\"")
////                } else if (variant.flavorName == 'free') {
////                    buildConfigField("String", "DNS", "\"http://114.114.114.114\"")
////                }
////            }
//        }
//
//        debug {
//            // debug模式下，显示log
//            buildConfigField("boolean", "LOG_DEBUG", "true")
//
//            //为已经存在的applicationId添加后缀
////            applicationIdSuffix ".debug"
//            // 为版本名添加后缀
//            versionNameSuffix "-debug"
//            // 不开启混淆
//            minifyEnabled false
//            // 不开启ZipAlign优化
//            zipAlignEnabled false
//            // 不移除无用的resource文件
//            shrinkResources false
//
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.AblegeniusMemberConfig
//        }
//    }

    /*多渠道打包*/
    productFlavors{
        china { // 主渠道
//            dimension "app"//打包后默认安装的包
            applicationId 'com.vension.mutiltheme.china' // 每个环境包名不同
            versionCode 100
            versionName '1.0.0'
            manifestPlaceholders = [
                    app_name: "V-China",
                    app_icon: "@mipmap/logo_china",
            ]
        }
        free { // 免费版
            //此处的常量都会通过Gradle 在 BuildConfig.java 文件中生成 ， 你可以直接在Class中使用 BuildConfig.XXXX 进行使用
            applicationId 'com.vension.mutiltheme.free' // 每个环境包名不同
            versionCode 100
            versionName '1.0.0'
            /*
              动态添加 string.xml 字段:
              注意，如果在这添加，在 string.xml 不能有这个字段，会重名！！！这里使用资源文件覆盖的方式来处理应用名称
            */
//            resValue "string", "app_name", "渠道应用名A"
//            resValue "bool", "auto_updates", 'false'
            /*
              动态修改 常量 字段
              注意，如果在这添加，在 string.xml 不能有这个字段，会重名！！！这里使用资源文件覆盖的方式来处理应用名称
            */
//            buildConfigField "String", "MAIN_H5_URL", '"https://xxxxxxx22/index.html"'
//            buildConfigField "String", "SERVER_URL", '"https://cloudxxxx22/a"'//服務器請求地址
//            buildConfigField "String", "company", '"SatayKing"'
//            buildConfigField "String", "serial", '"xxxxx"'
//            buildConfigField "int", "ENVIRONMENTInt", '2'
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [
                    app_name: "V-Free",
                    app_icon: "@mipmap/logo_free", //此方式可直接在 manifest 中通过 ${app_icon} 进行占位引用； 或者在main同级中创建不同渠道后创建 res 资源文件
            ]
        }
    }

    // 3.0 gradle 批量打包 命令打包: ./gradlew assembleRelease
    android.applicationVariants.all { variant ->
        variant.outputs.all {output ->
            //输出apk名称为：渠道名_版本名_时间.apk
            outputFileName = "${variant.productFlavors[0].name}Member_v${defaultConfig.versionName}_${releaseTime()}.apk"
        }
    }
    sourceSets {
        main { res.srcDirs = ['src/main/res', 'src/main/res/'] }
        china { res.srcDirs = ['src/china/res', 'src/china/res/'] }
        free { res.srcDirs = ['src/free/res', 'src/free/res/'] }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
